#!/bin/bash
set -Eeuo pipefail

VERSION=0.6.0


## Podman Global Declaration Variable
declare -A svcValues

export POSTGRES_INITDB_ARGS='--auth-local=scram-sha-256 --auth-host=scram-sha-256'

databaseNames=("plextracdb" "postgres")
serviceNames=("plextracdb" "postgres" "redis" "plextracapi" "notification-engine" "notification-sender" "contextual-scoring-service" "migrations" "plextracnginx")
#Defaults
svcValues[network]="--network=plextrac"
svcValues[env-file]="--env-file /opt/plextrac/.env"
#Couchbase
svcValues[cb-volumes]="-v dbdata:/opt/couchbase/var:Z,U -v couchbase-backups:/backups:Z,U"
svcValues[cb-ports]="-p 127.0.0.1:8091-8094:8091-8094"
svcValues[cb-image]="docker.io/plextrac/plextracdb:7.2.0"
#Postgres
svcValues[pg-volumes]="-v postgres-initdb:/docker-entrypoint-initdb.d -v postgres-data:/var/lib/postgresql/data -v postgres-backups:/backups:Z"
svcValues[pg-ports]="-p 127.0.0.1::5432"
svcValues[pg-healthcheck]='--health-cmd=["pg_isready","-U","internalonly"]'
svcValues[pg-image]="docker.io/postgres:14-alpine"
svcValues[pg-env-vars]="-e 'POSTGRES_HOST_AUTH_METHOD=scram-sha-256' -e 'PG_MIGRATE_PATH=/usr/src/plextrac-api' -e 'PGDATA=/var/lib/postgresql/data/pgdata'"
#API
svcValues[api-volumes]="-v uploads:/usr/src/plextrac-api/uploads:Z,U -v localesOverride:/usr/src/plextrac-api/localesOverride:rw"
svcValues[api-healthcheck]='--health-cmd=["wget","-q","-O-","http://127.0.0.1:4350/api/v2/health/live"]'
#Redis
svcValues[redis-volumes]="-v redis:/etc/redis:rw"
svcValues[redis-image]="docker.io/redis:6.2-alpine"
svcValues[redis-healthcheck]='--health-cmd=["redis-cli","--raw","incr","ping"]'
#Notification engine/sender
svcValues[notification-engine-entrypoint]='--entrypoint ["npm","run","start:notification-engine"]'
svcValues[notification-engine-healthcheck]='--health-cmd=["npm","run","healthcheck:notification-engine","readiness","10","--","--no-update-notifier"]'
svcValues[notification-sender-entrypoint]='--entrypoint ["npm","run","start:notification-sender"]'
svcValues[notification-sender-healthcheck]='--health-cmd=["npm","run","healthcheck:notification-sender","readiness","10","--","--no-update-notifier"]'
#Contextual scoring service
svcValues[contextual-scoring-service-entrypoint]='--entrypoint ["npm","run","start:contextual-scoring-service"]'
svcValues[contextual-scoring-service-healthcheck]='--health-cmd=["npm","run","healthcheck:contextual-scoring-service","liveness","10","--","--no-update-notifier"]'
#Migrations
svcValues[migrations-volumes]="--volumes-from=plextracapi"
#Nginx
svcValues[plextracnginx-volumes]="-v letsencrypt:/etc/letsencrypt:rw -v nginx_ssl_certs:/etc/ssl/:Z,U -v nginx_logos:/usr/share/nginx/html/dist/img/:Z,U"
svcValues[plextracnginx-healthcheck]='--health-cmd=["echo","GET","/","|","openssl","s_client","-quiet","-connect","127.0.0.1:443"]'

trap 'cleanup $?' SIGINT ERR EXIT

function backtrace() {
  local deptn=${#FUNCNAME[@]}

  for ((i=1; i<deptn; i++)); do
    local func="${FUNCNAME[$i]}"
    local line="${BASH_LINENO[$((i-1))]}"
    local src="${BASH_SOURCE[$((i-1))]}"
    >&2 printf '%*s' "$i" '' # indent
    >&2 echo "at: ${UNDERLINE}$func()${RESET}, $src, line $line"
  done
}

function cleanup() {
  local status_code=$1

  if [ "${EXITMSG:-}" != "" ]; then
    if [ "$status_code" -ne 0 ]; then
      error "${EXITMSG}"
    else
      info "${EXITMSG}"
    fi
  fi

  if [ "$status_code" -ne 0 ] && [ "${VERBOSE:-false}" == "true" ]; then
    error "${DIM}trace"
    backtrace
  fi
  if [ "$status_code" -ne 0 ] && [ "${VERBOSE:-false}" == "false" ]; then
    log "Try running with '-v' for verbose output for more details"
  fi

  trap - EXIT  # prevent calling cleanup again on exit
  exit $status_code
}


function interactiveHeader() {
  if tty -s; then
    purple="$(tput setaf 135)"
    >&2 echo "${purple}${DIM}";
    >&2 echo "______ _         _____              ";
    >&2 echo "| ___ \ |       |_   _|             ";
    >&2 echo "| |_/ / | _____  _| |_ __ __ _  ___ ";
    >&2 echo "|  __/| |/ _ \ \/ / | '__/ _\ |/ __|";
    >&2 echo "| |   | |  __/>  <| | | | (_| | (__ ";
    >&2 echo "\_|   |_|\___/_/\_\_/_|  \__,_|\___|";
    >&2 echo "                                    ";
    >&2 echo $RESET
    >&2 echo "${DIM}Instance Management Utility v$VERSION";
    >&2 echo $RESET
  fi
}

function mod_help() {
  title "Help for the PlexTrac management script"
  log ""
  info "Usage:  ${DIM}plextrac command [flags]\n"
  info "Examples:\n"
  info "PlexTrac Setup:"
  log "Prepare server for PlexTrac:         ${DIM}${GREEN}sudo ./plextrac initialize${RESET}"
  #Deprecated Migrate Command
  #log "Migrate existing instance:           ${DIM}${GREEN}plextrac migrate && plextrac install -y${RESET}"
  log "Install new instance:                ${DIM}${GREEN}plextrac install -y${RESET}"
  log ""
  info "PlexTrac Management:\n"
  log "Update to latest release:            ${DIM}${GREEN}plextrac update -y${RESET}"
  log "Perform backup:                      ${DIM}${GREEN}plextrac backup${RESET}"
  log "Cleanup stale cache & old backups:   ${DIM}${GREEN}plextrac clean${RESET}"
  log ""
  info "Available commands:"
  log "backup                               ${DIM}perform backup on currently running PlexTrac application${RESET}"
  log "check                                ${DIM}checks for version & status of PlexTrac application${RESET}"
  log "clean                                ${DIM}archives (compresses) local backups and removes stale copies${RESET}"
  log "configure                            ${DIM}does initial configuration required for PlexTrac application${RESET}"
  log "autocomplete                         ${DIM}creates CLI tab completion for plextrac utility commands${RESET}"
  log "initialize                           ${DIM}initialize local system for PlexTrac installation${RESET}"
  log "info                                 ${DIM}display information about the current PlexTrac Instance${RESET}"
  log "install                              ${DIM}install PlexTrac (assumes previously initialized system)${RESET}"
  log "logs                                 ${DIM}display logs from PlexTrac services. Usage: ${GREEN}plextrac logs [-s|--service plextracapi|plextracnginx|plextracdb|etc]${RESET}"
  log "migrate                              ${DIM}migrate current instance from legacy management scripts${RESET}"
  log "reload-cert                          ${DIM}reload PlexTrac SSL certificates${RESET}"
  log "restore                              ${DIM}restore instance from backups${RESET}"
  log "start                                ${DIM}start a PlexTrac instance${RESET}"
  log "stop                                 ${DIM}stop PlexTrac${RESET}"
  log "update                               ${DIM}updates the management utility & applies any configuration or application updates${RESET}"
  log ""
  info "Available flags to modify command behavior:"
  log " -h | --help                         ${DIM}prints this help message${RESET}"
  log " -d | --debug                        ${DIM}enables debug output VERY NOISY${RESET}"
  log " -v | --verbose                      ${DIM}enables verbose output, helpful for troubleshooting errors${RESET}"
  log " -y | --assume-yes                   ${DIM}assumes yes to all questions in script${RESET}"
  log " --install-dir | --plextrac-home     ${DIM}path to non-standard install directory. The default is /opt/plextrac${RESET}"
  log " --install-timeout NUM               ${DIM}seconds to wait for install migrations to complete. The default is 600 (10 mins)${RESET}"
}


function main() {
  export ProgName=$0
  _load_modules
  setup_colors

  mod=mod_help

  # This needs to be saved before we parse the command line arguments
  export _INITIAL_CMD_ARGS="$@"

  while [[ $# -gt 0 ]]; do
    case $1 in
      "-h" | "--help")
        break
        ;;
      "-d" | "--debug")
        set -x
        shift
        ;;
      "-V" | "--version")
        mod="mod_version"
        shift
        ;;
      "-v" | "--verbose")
        VERBOSE=true
        shift
        ;;
      "-y" | "--assume-yes")
        ASSUME_YES=true
        shift
        ;;
      # only used for mod_check
      "--pre" | "--preinstall")
        DO_PREINSTALL_CHECKS=1
        shift
        ;;
      # skip checks for existing installation, mostly for doing a migration
      "--ignore-existing")
        IGNORE_EXISTING_INSTALLATION=1
        shift
        ;;
      "--install-dir" | "--plextrac-home")
        PLEXTRAC_HOME=$2
        shift
        shift
        ;;
      "--force-upgrade")
        FORCEUPGRADE="force"
        shift
        ;;
      # Enable restoring during installation (before migrations)
      "--restore")
        RESTOREONINSTALL=1
        shift
        ;;
      # Enable restoring a specific target
      "--restore-only")
        RESTORETARGET=$2
        shift
        shift
        ;;
      "dist")
        mod=mod_dist
        break
        ;;
      "-s" | "--service")
        LOG_SERVICE=${2-''}
        shift
        shift
        ;;
      # only used for mod_install
      "--install-timeout")
        INSTALL_WAIT_TIMEOUT=$2
        shift
        shift
        ;;
      "-c" | "--container-runtime")
        CONTAINER_RUNTIME=$2
        shift
        shift
        ;;
      *)
        if declare -f mod_$1 >/dev/null 2>&1; then
          # enable event logging for sub commands
          doModLog=1
          mod=mod_$1
        else
          EXITMSG="Invalid argument $1"
          return 1
        fi
        shift
        ;;
    esac
  done
  export PLEXTRAC_HOME=${PLEXTRAC_HOME:-/opt/plextrac}
  export CONTAINER_RUNTIME=${CONTAINER_RUNTIME:-"docker"}
  _load_env
  _load_static
  interactiveHeader

  if [ ${doModLog:-0} -eq 1 ]; then event__log_activity "command:`declare -F $mod`"; fi
  $mod
}

function _load_modules() {
  # Checks if all child functions are loaded, if not
  # loads them in from (assumed) current relative directory
  if ! declare -f z_end_of_plextrac >/dev/null 2>&1; then
    for module in $(find $(dirname $0) -type f -name "_*.sh"); do
      source $module
    done
  fi
}

function _load_env() {
  for env_file in "$PLEXTRAC_HOME/.env" .env config.txt; do
    if test -f $env_file; then
      source $env_file
      break 1
    fi
  done
}

# Build "dist" of the cli
function mod_dist() {
  if grep -q -e "^DOCKER_COMPOSE_ENCODED=.*" $0; then
    debug "Detected embedded compose file. dist will output the current script"
    cat $0
  else
    debug "Generating script with embedded compose files"
    sed -e '/main "$@"$/e \
      echo "" \
      cat '"$(dirname $0)"'/_*.sh \
      echo "" \
      echo "DIST=true" \
      echo -n "DOCKER_COMPOSE_ENCODED="; \
      base64 -w0 '"$(dirname $0)"'/../static/docker-compose.yml \
      echo "" \
      echo -n "DOCKER_COMPOSE_OVERRIDE_ENCODED="; \
      base64 -w0 '"$(dirname $0)"'/../static/docker-compose.override.yml \
      echo ""' \
      $0
  fi
}


function mod_initialize() {
  info "Initializing environment for PlexTrac..."
  check_container_runtime
  requires_user_root
  info "Setting up system packages"
  system_packages__do_system_upgrade
  system_packages__install_system_dependencies
  if [ "$CONTAINER_RUNTIME" == "docker" ]; then
    install_docker "${FORCEUPGRADE-}"
    install_docker_compose "${FORCEUPGRADE-}"
  fi
  if [ "$CONTAINER_RUNTIME" == "podman" ] || [ "$CONTAINER_RUNTIME" == "podman-compose" ]; then
    install_podman "${FORCEUPGRADE-}"
    if [ "$CONTAINER_RUNTIME" == "podman-compose" ]; then
      install_podman_compose "${FORCEUPGRADE-}"
    fi
  fi
  title "Setting up local PlexTrac user"
  create_user
  configure_user_environment
  copy_scripts
  fix_file_ownership
}

function mod_install() {
  if [ "$CONTAINER_RUNTIME" != "podman" ]; then
    title "Installing PlexTrac Instance"
    requires_user_plextrac
    mod_configure
    info "Starting Databases before other services"
    compose_client up -d "$couchbaseComposeService" "$postgresComposeService"
    info "Sleeping to give Databases a chance to start up"
    local progressBar
    for i in `seq 1 20`; do
      progressBar=`printf ".%.0s%s"  {1..$i} "${progressBar:-}"`
      msg "\r%b" "${GREEN}[+]${RESET} ${NOCURSOR}${progressBar}"
      sleep 2
    done
    >&2 echo -n "${RESET}"
    log "Done"
    mod_autofix
    if [ ${RESTOREONINSTALL:-0} -eq 1 ]; then
      info "Restoring from backups"
      log "Restoring databases first"
      RESTORETARGET="couchbase" mod_restore
      if [ -n "$(ls -A -- ${PLEXTRAC_BACKUP_PATH}/postgres/)" ]; then
        RESTORETARGET="postgres" mod_restore
      fi
      if [ -n "$(ls -A -- ${PLEXTRAC_BACKUP_PATH}/uploads/)" ]; then
        log "Starting API to prepare for uploads restore"
        compose_client up -d "$coreBackendComposeService"
        log "Restoring uploads"
        RESTORETARGET="uploads" mod_restore
      fi
    fi
    pull_docker_images
    mod_start "${INSTALL_WAIT_TIMEOUT:-600}" # allow up to 10 or specified minutes for startup on install, due to migrations
    mod_info
    info "Post installation note:"
    log "If you wish to have access to historical logs, you can configure docker to send logs to journald."
    log "Please see the config steps at"
    log "https://docs.plextrac.com/plextrac-documentation/product-documentation-1/on-premise-management/setting-up-historical-logs"
  else
    plextrac_install_podman "svcValues"
  fi
}

function mod_configure() {
  title "Setting up base PlexTrac configuration..."
  requires_user_plextrac
  check_container_runtime
  generate_default_config
  login_dockerhub
  if [ "$CONTAINER_RUNTIME" == "docker" ] || [ "$CONTAINER_RUNTIME" == "podman-compose" ]; then
    updateComposeConfig
    validateComposeConfig
    create_volume_directories
    deploy_volume_contents_postgres
  elif [ "$CONTAINER_RUNTIME" == "podman" ]; then
    podman_setup
    deploy_volume_contents_postgres
  fi
  mod_autocomplete
}

function mod_start() {
  if [ "$CONTAINER_RUNTIME" == "podman" ]; then
    plextrac_start_podman "svcValues"
  else
    title "Starting PlexTrac..."
    requires_user_plextrac
    # Enable database migrations on startup
    compose_client --profile=database-migrations up -d --remove-orphans

    waitTimeout=${1:-90}
    info "Waiting up to ${waitTimeout}s for application startup"
    local progressBar
    # todo: extract this to function waitForCondition
    # it should take an optional param which is a function
    # that should return 0 when ready
    (
      while true; do
        progressBar=$(printf ".%s" "${progressBar:-}")
        msg "\r%b" "${GREEN}[+]${RESET} ${NOCURSOR}${progressBar}"
        sleep 2
      done &
      progressBarPid=$!
      timeout --preserve-status $waitTimeout docker wait \
        "$(compose_client ps couchbase-migrations -q)" >/dev/null \
        || { error "Migrations exceeded timeout"; kill $progressBarPid; exit 1; } &

      timeoutPid=$!
      trap "kill $progressBarPid $timeoutPid >/dev/null 2>&1 || true" SIGINT SIGTERM

      wait $timeoutPid

      kill $progressBarPid >/dev/null 2>&1 || true
      >&2 echo -n "${RESET}"

      msg " Done"
    )
  fi
}

function mod_autofix() {
  title "Fixing Auto-Correctable Issues"
  configure_couchbase_users
  # Add postgres configuration monitor here
  postgres_metrics_validation
}

function mod_version() {
  echo "${VERSION}"
}

main "$@"
